steps:
  # Run tests
  - name: 'python:3.8'
    entrypoint: bash
    args:
      - '-c'
      - |
        pip install -r requirements.txt
        pip install pytest pytest-flask
        pytest

  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/meeting-spot-backend:$COMMIT_SHA', '.']

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/meeting-spot-backend:$COMMIT_SHA']

  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
    - 'run'
    - 'deploy'
    - 'meeting-spot-backend'
    - '--image'
    - 'gcr.io/$PROJECT_ID/meeting-spot-backend:$COMMIT_SHA'
    - '--region'
    - 'us-east1'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
    - '--set-env-vars'
    - 'FLASK_ENV=production,GOOGLE_MAPS_API_KEY=$$GOOGLE_MAPS_API_KEY,DATABASE_URL=$$DATABASE_URL,RUN_MIGRATIONS=true,INSTANCE_CONNECTION_NAME=find-a-meeting-spot:us-east1:findameetingspot'
    - '--add-cloudsql-instances'
    - 'find-a-meeting-spot:us-east1:findameetingspot'

images:
  - 'gcr.io/$PROJECT_ID/meeting-spot-backend:$COMMIT_SHA'

substitutions:
  _REGION: us-east1

# Use secret manager to securely access API keys
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/google-maps-api-key/versions/latest
    env: 'GOOGLE_MAPS_API_KEY'
  - versionName: projects/$PROJECT_ID/secrets/database-url/versions/latest
    env: 'DATABASE_URL'
