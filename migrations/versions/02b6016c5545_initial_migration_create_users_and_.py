"""Initial migration: Create users and meeting_requests tables

Revision ID: 02b6016c5545
Revises:
Create Date: 2025-03-30 21:32:06.492800

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "02b6016c5545"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("password_hash", sa.String(length=128), nullable=False),
        sa.Column("google_oauth_id", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_users_email"),
            ["email"],
            unique=True)
        batch_op.create_index(
            batch_op.f("ix_users_google_oauth_id"), ["google_oauth_id"], unique=True
        )

    op.create_table(
        "meeting_requests",
        sa.Column("request_id", sa.UUID(), nullable=False),
        sa.Column("user_a_id", sa.Integer(), nullable=True),
        sa.Column(
            "user_b_contact_type",
            sa.Enum("EMAIL", "SMS", name="contacttype"),
            nullable=False,
        ),
        sa.Column("user_b_contact_encrypted", sa.Text(), nullable=False),
        sa.Column("location_type", sa.String(length=100), nullable=False),
        sa.Column(
            "address_a_lat",
            sa.DECIMAL(
                precision=9,
                scale=6),
            nullable=False),
        sa.Column(
            "address_a_lon",
            sa.DECIMAL(
                precision=9,
                scale=6),
            nullable=False),
        sa.Column(
            "address_b_lat",
            sa.DECIMAL(
                precision=9,
                scale=6),
            nullable=True),
        sa.Column(
            "address_b_lon",
            sa.DECIMAL(
                precision=9,
                scale=6),
            nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING_B_ADDRESS",
                "CALCULATING",
                "PENDING_A_SELECTION",
                "CONFIRMED",
                "COMPLETED",
                "ERROR_NO_PLACES_FOUND",
                "ERROR_GEOCODING_A",
                "ERROR_GEOCODING_B",
                "ERROR_DIRECTIONS",
                "ERROR_PLACES",
                "ERROR_GENERIC",
                "CANCELLED",
                name="meetingrequeststatus",
            ),
            nullable=False,
        ),
        sa.Column("token_b", sa.String(length=64), nullable=False),
        sa.Column(
            "selected_place_google_id",
            sa.String(
                length=255),
            nullable=True),
        sa.Column(
            "selected_place_details",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "suggested_options",
            postgresql.JSONB(
                astext_type=sa.Text()),
            nullable=True),
        sa.Column("session_identifier_a", sa.String(length=64), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_a_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("request_id"),
    )
    with op.batch_alter_table("meeting_requests", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_meeting_requests_session_identifier_a"),
            ["session_identifier_a"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_meeting_requests_status"),
            ["status"],
            unique=False)
        batch_op.create_index(
            batch_op.f("ix_meeting_requests_token_b"),
            ["token_b"],
            unique=True)
        batch_op.create_index(
            "ix_meeting_requests_user_a_id",
            ["user_a_id"],
            unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("meeting_requests", schema=None) as batch_op:
        batch_op.drop_index("ix_meeting_requests_user_a_id")
        batch_op.drop_index(batch_op.f("ix_meeting_requests_token_b"))
        batch_op.drop_index(batch_op.f("ix_meeting_requests_status"))
        batch_op.drop_index(
            batch_op.f("ix_meeting_requests_session_identifier_a"))

    op.drop_table("meeting_requests")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_google_oauth_id"))
        batch_op.drop_index(batch_op.f("ix_users_email"))

    op.drop_table("users")
    # ### end Alembic commands ###
