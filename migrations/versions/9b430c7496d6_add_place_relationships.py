"""add_place_relationships

Revision ID: 9b430c7496d6
Revises: 85486b734ee3
Create Date: 2025-04-08 13:19:31.883901

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from app.models.types import UUIDType

# revision identifiers, used by Alembic.
revision = "9b430c7496d6"
down_revision = "85486b734ee3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "places",
        sa.Column("id", UUIDType(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("google_place_id", sa.String(), nullable=True),
        sa.Column("suggested_by_id", UUIDType(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["suggested_by_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("google_place_id"),
    )

    op.create_table(
        "meeting_request_suggested_places",
        sa.Column("meeting_request_id", UUIDType(), nullable=False),
        sa.Column("place_id", UUIDType(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["meeting_request_id"],
            ["meeting_requests.request_id"],
        ),
        sa.ForeignKeyConstraint(
            ["place_id"],
            ["places.id"],
        ),
        sa.PrimaryKeyConstraint("meeting_request_id", "place_id"),
    )

    op.add_column("meeting_requests", sa.Column("selected_place_id", UUIDType(), nullable=True))
    op.alter_column(
        "meeting_requests",
        "user_b_contact_encrypted",
        existing_type=sa.TEXT(),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "location_type",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=50),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "address_a_lat",
        existing_type=sa.NUMERIC(precision=9, scale=6),
        type_=sa.Float(),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "address_a_lon",
        existing_type=sa.NUMERIC(precision=9, scale=6),
        type_=sa.Float(),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "address_b_lat",
        existing_type=sa.NUMERIC(precision=9, scale=6),
        type_=sa.Float(),
        existing_nullable=True,
    )
    op.alter_column(
        "meeting_requests",
        "address_b_lon",
        existing_type=sa.NUMERIC(precision=9, scale=6),
        type_=sa.Float(),
        existing_nullable=True,
    )
    op.alter_column(
        "meeting_requests",
        "session_identifier_a",
        existing_type=sa.VARCHAR(length=64),
        type_=sa.String(length=255),
        existing_nullable=True,
    )
    op.alter_column(
        "meeting_requests",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.drop_index("ix_meeting_requests_token_b", table_name="meeting_requests")
    op.create_index("ix_meeting_requests_token_b", "meeting_requests", ["token_b"], unique=False)
    op.create_index("ix_meeting_requests_user_a_id", "meeting_requests", ["user_a_id"], unique=False)
    op.create_unique_constraint(None, "meeting_requests", ["token_b"])
    op.create_foreign_key(None, "meeting_requests", "places", ["selected_place_id"], ["id"])
    op.drop_column("meeting_requests", "meeting_spots")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "meeting_requests",
        sa.Column("meeting_spots", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "meeting_requests", type_="foreignkey")
    op.drop_constraint(None, "meeting_requests", type_="unique")
    op.drop_index("ix_meeting_requests_user_a_id", table_name="meeting_requests")
    op.drop_index("ix_meeting_requests_token_b", table_name="meeting_requests")
    op.create_index("ix_meeting_requests_token_b", "meeting_requests", ["token_b"], unique=True)
    op.alter_column(
        "meeting_requests",
        "expires_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "session_identifier_a",
        existing_type=sa.String(length=255),
        type_=sa.VARCHAR(length=64),
        existing_nullable=True,
    )
    op.alter_column(
        "meeting_requests",
        "address_b_lon",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=9, scale=6),
        existing_nullable=True,
    )
    op.alter_column(
        "meeting_requests",
        "address_b_lat",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=9, scale=6),
        existing_nullable=True,
    )
    op.alter_column(
        "meeting_requests",
        "address_a_lon",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=9, scale=6),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "address_a_lat",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=9, scale=6),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "location_type",
        existing_type=sa.String(length=50),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.alter_column(
        "meeting_requests",
        "user_b_contact_encrypted",
        existing_type=sa.String(length=255),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("meeting_requests", "selected_place_id")
    op.drop_table("meeting_request_suggested_places")
    op.drop_table("places")
    # ### end Alembic commands ###
